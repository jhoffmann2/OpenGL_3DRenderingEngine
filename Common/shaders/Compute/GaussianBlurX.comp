#version 430
layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in; // Declares thread group size
#define maxW 64

layout (location = 1) uniform uint w;

layout (std140, binding = 3) uniform blurKernel {
    float weights[(2 * maxW) + 1];
}; // Declares a uniform block

layout (rgba32f, binding = 4) uniform readonly image2D src; // src image as 4 channel 32bit float readonly
layout (rgba32f, binding = 5) uniform writeonly image2D dst; // dst image as 4 channel 32bit float writeonly

shared vec4 v[128 + (2 * maxW) + 1]; // Variable shared with other threads in the 128x1 thread group

void main() {
    const ivec2 gpos = ivec2(gl_GlobalInvocationID.xy); // Combo of groupID, groupSize and localID
    const uint i = gl_LocalInvocationID.x; // Local thread id in the 128x1 thread groups128x1

    v[i] = imageLoad(src, gpos + ivec2(-w, 0));
    if (i<2*w) v[i+128] = imageLoad(src, gpos+ivec2(128-w, 0)); // read extra 2*w pixels
    barrier(); // Wait for all threads to catchup before reading v[]

    // sum up blurKernel[0 ... 2w] * v[i ... i+2w]
    vec4 sum = vec4(0, 0, 0, 0);
    for(int j = 0; j <= 2 * w; ++j)
    {
        sum += weights[j] * v[i + j];
    }
    imageStore(dst, gpos, sum); // Write to destination image
}